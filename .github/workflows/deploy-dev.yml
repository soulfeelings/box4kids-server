name: 🚀 Deploy Box4Kids Server (dev)

on:
  workflow_dispatch:
    inputs:
      buildImage:
        description: "Build API image from Dockerfile?"
        required: true
        default: "true"
        type: choice
        options: ["true", "false"]
      resetDevEnvironment:
        description: "Reset environment (remove volumes/images)?"
        required: true
        default: "false"
        type: choice
        options: ["true", "false"]
      runMigrations:
        description: "Run Alembic migrations?"
        required: true
        default: "true"
        type: choice
        options: ["true", "false"]
      pullBaseImages:
        description: "Pull base images (postgres/redis) from registry?"
        required: true
        default: "false"
        type: choice
        options: ["true", "false"]
  push:
    branches: ["dev"]

env:
  COMPOSE_PROJECT_NAME: box4kids-server

jobs:
  deploy:
    runs-on: [self-hosted, backend]

    steps:
      - name: ✅ Checkout repo
        uses: actions/checkout@v4

      - name: 📦 Create .env
        run: |
          cat > .env << 'EOF'
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          ENVIRONMENT=development
          DEBUG=true
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          CLICK_MERCHANT_ID=${{ secrets.CLICK_MERCHANT_ID }}
          CLICK_SECRET_KEY=${{ secrets.CLICK_SECRET_KEY }}
          CLICK_SERVICE_ID=${{ secrets.CLICK_SERVICE_ID }}
          CLICK_MERCHANT_USER_ID=${{ secrets.CLICK_MERCHANT_USER_ID }}
          PAYME_MERCHANT_ID=${{ secrets.PAYME_MERCHANT_ID }}
          PAYME_SECRET_KEY=${{ secrets.PAYME_SECRET_KEY }}
          PAYME_SUBSCRIBE_API_URL=${{ vars.PAYME_SUBSCRIBE_API_URL }}
          PAYME_MERCHANT_API_URL=${{ vars.PAYME_MERCHANT_API_URL }}
          PAYME_TEST_MODE=true
          SMS_LOGIN=${{ secrets.SMS_LOGIN }}
          SMS_PASSWORD=${{ secrets.SMS_PASSWORD }}
          SMS_NICKNAME=${{ secrets.SMS_NICKNAME }}
          SMS_ENABLED=false
          EOF

      - name: 💣 Reset environment (optional)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.resetDevEnvironment == 'true' }}
        run: |
          docker compose down -v --remove-orphans --filter name=${{ env.COMPOSE_PROJECT_NAME }} || true
          docker image prune -f --filter name=${{ env.COMPOSE_PROJECT_NAME }} || true
          docker builder prune -f --filter name=${{ env.COMPOSE_PROJECT_NAME }} || true
          docker volume ls --filter name=${{ env.COMPOSE_PROJECT_NAME }} -q | xargs -r docker volume rm

      - name: ⬇️ Pull base images (optional)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.pullBaseImages == 'true' }}
        run: |
          docker compose pull postgres redis

      - name: 🏗️ (Optional) Build API image
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.buildImage == 'true') || github.event_name == 'push' }}
        run: |
          docker compose build api

      - name: 🐘 Start Postgres & Redis
        run: |
          docker compose up -d postgres redis

      - name: ⏳ Wait for Postgres healthy
        run: |
          CID="$(docker compose ps -q postgres)"
          for i in {1..60}; do
            STATUS="$(docker inspect -f '{{.State.Health.Status}}' "$CID" 2>/dev/null || echo starting)"
            echo "Postgres health: $STATUS"
            [ "$STATUS" = "healthy" ] && exit 0
            sleep 2
          done
          docker compose logs postgres --tail=200
          exit 1

      - name: 🧱 Run Alembic migrations
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.runMigrations == 'true') || github.event_name == 'push' }}
        run: |
          docker compose run --rm migrate

      - name: 🚀 Start API
        run: |
          docker compose up -d api

      - name: ❤️ API healthcheck
        run: |
          for i in {1..30}; do
            curl -fsS http://127.0.0.1:8000/health >/dev/null && exit 0
            echo "waiting API... ($i)"; sleep 2
          done
          docker compose logs api --tail=200
          exit 1
