from sqlalchemy.orm import Session
from repositories.interest_repository import InterestRepository
from repositories.skill_repository import SkillRepository
from repositories.toy_category_repository import ToyCategoryRepository
from repositories.subscription_plan_repository import SubscriptionPlanRepository
from repositories.plan_toy_configuration_repository import PlanToyConfigurationRepository
from repositories.inventory_repository import InventoryRepository
from services.category_mapping_service import CategoryMappingService


# –•–∞—Ä–¥–∫–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
INTERESTS_DATA = [
    {"name": "üß∏ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã"},
    {"name": "üß∏ –ü–ª—é—à–µ–≤—ã–µ"},
    {"name": "üé≤ –†–æ–ª–µ–≤—ã–µ"},
    {"name": "üß† –†–∞–∑–≤–∏–≤–∞—é—â–∏–µ"},
    {"name": "‚öôÔ∏è –¢–µ—Ö–Ω–∏–∫–∞"},
    {"name": "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ"},
]


# –•–∞—Ä–¥–∫–æ–¥ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
SKILLS_DATA = [
    {"name": "‚úã –ú–æ—Ç–æ—Ä–∏–∫–∞"},
    {"name": "üß† –õ–æ–≥–∏–∫–∞"},
    {"name": "üé≠ –í–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ"},
    {"name": "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ"},
    {"name": "üí¨ –†–µ—á—å"},
]


# –•–∞—Ä–¥–∫–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–≥—Ä—É—à–µ–∫
TOY_CATEGORIES_DATA = [
    {"name": "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", "description": "–†–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π", "icon": "üß©"},
    {"name": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä", "description": "–ù–∞–±–æ—Ä—ã –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è", "icon": "üé®"},
    {"name": "–ú—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞", "description": "–ú—è–≥–∫–∏–µ –ø–ª—é—à–µ–≤—ã–µ –∏–≥—Ä—É—à–∫–∏", "icon": "üß∏"},
    {"name": "–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞", "description": "–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–≥—Ä—ã –∏ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏", "icon": "üß†"},
    {"name": "–ü—Ä–µ–º–∏—É–º-–∏–≥—Ä—É—à–∫–∞", "description": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—É—à–∫–∏", "icon": "‚≠ê"},
]


# –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –∏ –Ω–∞–≤—ã–∫–∞–º–∏
CATEGORY_MAPPINGS = {
    "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä": {
        "interests": ["üß∏ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã", "‚öôÔ∏è –¢–µ—Ö–Ω–∏–∫–∞"],
        "skills": ["‚úã –ú–æ—Ç–æ—Ä–∏–∫–∞", "üß† –õ–æ–≥–∏–∫–∞"]
    },
    "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä": {
        "interests": ["üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ"],
        "skills": ["üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "üé≠ –í–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ"]
    },
    "–ú—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞": {
        "interests": ["üß∏ –ü–ª—é—à–µ–≤—ã–µ", "üé≤ –†–æ–ª–µ–≤—ã–µ"],
        "skills": ["üé≠ –í–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "üí¨ –†–µ—á—å"]
    },
    "–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞": {
        "interests": ["üß† –†–∞–∑–≤–∏–≤–∞—é—â–∏–µ"],
        "skills": ["üß† –õ–æ–≥–∏–∫–∞", "‚úã –ú–æ—Ç–æ—Ä–∏–∫–∞"]
    },
    "–ü—Ä–µ–º–∏—É–º-–∏–≥—Ä—É—à–∫–∞": {
        "interests": ["üß† –†–∞–∑–≤–∏–≤–∞—é—â–∏–µ", "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ"],
        "skills": ["üß† –õ–æ–≥–∏–∫–∞", "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "üé≠ –í–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ"]
    }
}


# –•–∞—Ä–¥–∫–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
SUBSCRIPTION_PLANS_DATA = [
    {
        "name": "–ë–∞–∑–æ–≤—ã–π",
        "price_monthly": 35.0,
        "toy_count": 6,
        "description": "–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö –∏–≥—Ä—É—à–µ–∫ –¥–ª—è –¥–µ—Ç–µ–π"
    },
    {
        "name": "–ü—Ä–µ–º–∏—É–º",
        "price_monthly": 60.0,
        "toy_count": 9,
        "description": "–ü—Ä–µ–º–∏—É–º –Ω–∞–±–æ—Ä —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –∏–≥—Ä—É—à–∫–∞–º–∏"
    }
]


# –•–∞—Ä–¥–∫–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–ª–∞–Ω–æ–≤ (plan_name -> category_name -> quantity)
PLAN_CONFIGURATIONS = {
    "–ë–∞–∑–æ–≤—ã–π": {
        "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä": 2,
        "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä": 2,
        "–ú—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞": 1,
        "–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞": 1,
    },
    "–ü—Ä–µ–º–∏—É–º": {
        "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä": 3,
        "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä": 2,
        "–ú—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞": 2,
        "–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞": 1,
        "–ü—Ä–µ–º–∏—É–º-–∏–≥—Ä—É—à–∫–∞": 1,
    }
}

def initialize_mock_inventory(db: Session) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥–∞ (–ú–û–ö)"""
    repository = InventoryRepository(db)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–∫–ª–∞–¥
    invetory = repository.get_all()
    if invetory:
        print("–°–∫–ª–∞–¥ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–º–æ–∫)")
        return

    data = []

    for category in TOY_CATEGORIES_DATA:
        name = category["name"]
        data.append({
            "category_name": name,
            "available_quantity": 50
        })

    repository.create_many(data)
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(data)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Å–∫–ª–∞–¥–µ")


def initialize_category_mappings(db: Session) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏/–Ω–∞–≤—ã–∫–∞–º–∏"""
    mapping_service = CategoryMappingService(db)
    category_repo = ToyCategoryRepository(db)
    interest_repo = InterestRepository(db)
    skill_repo = SkillRepository(db)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑–∏
    categories = category_repo.get_all()
    if categories and categories[0].interests:
        print("–°–≤—è–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –∏ –Ω–∞–≤—ã–∫–∞–º–∏...")
    
    for category_name, mappings in CATEGORY_MAPPINGS.items():
        category = category_repo.get_by_name(category_name)
        if not category:
            print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã
        for interest_name in mappings["interests"]:
            interest = interest_repo.get_by_name(interest_name)
            if interest:
                mapping_service.add_interest_to_category(category.id, interest.id)
                print(f"–î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å {interest_name} –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤—ã–∫–∏
        for skill_name in mappings["skills"]:
            skill = skill_repo.get_by_name(skill_name)
            if skill:
                mapping_service.add_skill_to_category(category.id, skill.id)
                print(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–∞–≤—ã–∫ {skill_name} –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}")
    
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def initialize_interests(db: Session) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    repository = InterestRepository(db)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    existing_interests = repository.get_all()
    if existing_interests:
        print("–ò–Ω—Ç–µ—Ä–µ—Å—ã —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã
    interests = repository.create_many(INTERESTS_DATA)
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(interests)} –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤")


def initialize_skills(db: Session) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤"""
    repository = SkillRepository(db)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–≤—ã–∫–∏
    existing_skills = repository.get_all()
    if existing_skills:
        print("–ù–∞–≤—ã–∫–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞–≤—ã–∫–∏
    skills = repository.create_many(SKILLS_DATA)
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(skills)} –Ω–∞–≤—ã–∫–æ–≤")


def initialize_toy_categories(db: Session) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–≥—Ä—É—à–µ–∫"""
    repository = ToyCategoryRepository(db)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    existing_categories = repository.get_all()
    if existing_categories:
        print("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä—É—à–µ–∫ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = repository.create_many(TOY_CATEGORIES_DATA)
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–≥—Ä—É—à–µ–∫")


def initialize_subscription_plans(db: Session) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏"""
    plan_repository = SubscriptionPlanRepository(db)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–ª–∞–Ω—ã
    existing_plans = plan_repository.get_all()
    if existing_plans:
        print("–ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω—ã
    plans = plan_repository.create_many(SUBSCRIPTION_PLANS_DATA)
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(plans)} –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏")


def initialize_plan_toy_configurations(db: Session) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–ª–∞–Ω–æ–≤"""
    plan_repository = SubscriptionPlanRepository(db)
    category_repository = ToyCategoryRepository(db)
    config_repository = PlanToyConfigurationRepository(db)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    existing_configs = config_repository.get_all()
    if existing_configs:
        print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    configs_data = []
    for plan_name, categories_config in PLAN_CONFIGURATIONS.items():
        # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞–Ω –ø–æ –∏–º–µ–Ω–∏
        plan = plan_repository.get_by_name(plan_name)
        if not plan:
            print(f"–ü–ª–∞–Ω {plan_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
        
        for category_name, quantity in categories_config.items():
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏
            category = category_repository.get_by_name(category_name)
            if not category:
                print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                continue
            
            configs_data.append({
                "plan_id": plan.id,
                "category_id": category.id,
                "quantity": quantity
            })
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    configs = config_repository.create_many(configs_data)
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(configs)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–ª–∞–Ω–æ–≤")


def initialize_all_data(db: Session) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö.......")
    
    try:
        initialize_interests(db)
        initialize_skills(db)
        initialize_toy_categories(db)
        initialize_subscription_plans(db)
        initialize_plan_toy_configurations(db)
        initialize_mock_inventory(db)
        initialize_category_mappings(db) # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        db.commit()
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
        raise 