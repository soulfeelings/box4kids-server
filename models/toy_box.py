from sqlalchemy import Integer, ForeignKey, DateTime, Enum, String, Text, Date, func, JSON
from sqlalchemy.orm import relationship, Mapped, mapped_column
from datetime import date, datetime
import enum
from core.database import Base
from typing import Optional, List

class ToyBoxStatus(enum.Enum):
    """–°—Ç–∞—Ç—É—Å—ã –Ω–∞–±–æ—Ä–∞ –∏–≥—Ä—É—à–µ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞—Ä–µ–Ω–¥—ã"""
    
    PLANNED = "planned"        # üéØ ToyBox —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –∂–¥—ë—Ç —Å–±–æ—Ä–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
    ASSEMBLED = "assembled"    # üìã –ò–≥—Ä—É—à–∫–∏ —Å–æ–±—Ä–∞–Ω—ã –∏ —É–ø–∞–∫–æ–≤–∞–Ω—ã, –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
    SHIPPED = "shipped"        # üöö –ù–∞–±–æ—Ä –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É, –≤ –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É
    DELIVERED = "delivered"    # ‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª –Ω–∞–±–æ—Ä, –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã –∞–∫—Ç–∏–≤–µ–Ω
    RETURNED = "returned"      # üîÑ –ò–≥—Ä—É—à–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, –Ω–∞–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω

class ToyBox(Base):
    __tablename__ = "toy_boxes"

    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    subscription_id: Mapped[int] = mapped_column(Integer, ForeignKey("subscriptions.id"), nullable=False)
    child_id: Mapped[int] = mapped_column(Integer, ForeignKey("children.id"), nullable=False)
    delivery_info_id: Mapped[Optional[int]] = mapped_column(Integer, ForeignKey("delivery_info.id"), nullable=True)
    status: Mapped[ToyBoxStatus] = mapped_column(Enum(ToyBoxStatus), default=ToyBoxStatus.PLANNED)
    delivery_date: Mapped[Optional[date]] = mapped_column(Date, nullable=True)
    return_date: Mapped[Optional[date]] = mapped_column(Date, nullable=True)
    delivery_time: Mapped[Optional[str]] = mapped_column(String, nullable=True)
    return_time: Mapped[Optional[str]] = mapped_column(String, nullable=True)
    interest_tags: Mapped[Optional[List[str]]] = mapped_column(JSON, nullable=True)  # JSONB –º–∞—Å—Å–∏–≤ —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –∏–ª–∏ —Å–∫–∏–ª–ª–∞–º–∏ —Ä–µ–±–µ–Ω–∫–∞
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=func.now())

    # –°–æ—Å—Ç–∞–≤ –Ω–∞–±–æ—Ä–∞
    items = relationship("ToyBoxItem", back_populates="box", cascade="all, delete-orphan")
    reviews = relationship("ToyBoxReview", back_populates="box", cascade="all, delete-orphan")

class ToyBoxItem(Base):
    __tablename__ = "toy_box_items"

    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    box_id: Mapped[int] = mapped_column(Integer, ForeignKey("toy_boxes.id"), nullable=False)
    toy_category_id: Mapped[int] = mapped_column(Integer, ForeignKey("toy_categories.id"), nullable=False)
    quantity: Mapped[int] = mapped_column(Integer, nullable=False)

    box = relationship("ToyBox", back_populates="items")
    category = relationship("ToyCategory")

class ToyBoxReview(Base):
    __tablename__ = "toy_box_reviews"

    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    box_id: Mapped[int] = mapped_column(Integer, ForeignKey("toy_boxes.id"), nullable=False)
    user_id: Mapped[int] = mapped_column(Integer, ForeignKey("users.id"), nullable=False)
    rating: Mapped[int] = mapped_column(Integer, nullable=False)
    comment: Mapped[str] = mapped_column(Text, nullable=True)
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=func.now())

    box = relationship("ToyBox", back_populates="reviews") 