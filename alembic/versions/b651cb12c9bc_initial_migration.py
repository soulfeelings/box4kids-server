"""Initial migration

Revision ID: b651cb12c9bc
Revises: 
Create Date: 2025-08-11 10:32:58.169078

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b651cb12c9bc'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create enum type first
    op.execute("CREATE TYPE paymenttype AS ENUM ('MOCK', 'CLICK', 'PAYME')")
    
    op.create_table('click_card_tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('card_token', sa.String(length=255), nullable=False),
    sa.Column('card_number', sa.String(length=19), nullable=False),
    sa.Column('expire_date', sa.String(length=4), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('card_token')
    )
    op.create_index(op.f('ix_click_card_tokens_id'), 'click_card_tokens', ['id'], unique=False)
    op.create_table('payme_card_tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('card_token', sa.String(length=255), nullable=False),
    sa.Column('card_number', sa.String(length=19), nullable=False),
    sa.Column('expire_date', sa.String(length=4), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('card_token')
    )
    op.create_index(op.f('ix_payme_card_tokens_id'), 'payme_card_tokens', ['id'], unique=False)
    op.drop_index('ix_inventory_category_id', table_name='inventory')
    op.drop_index('ix_inventory_id', table_name='inventory')
    op.drop_table('inventory')
    # Add payment_type column as nullable first
    op.add_column('payments', sa.Column('payment_type', sa.Enum('MOCK', 'CLICK', 'PAYME', name='paymenttype'), nullable=True))
    
    # Update existing records with default value
    op.execute("UPDATE payments SET payment_type = 'MOCK' WHERE payment_type IS NULL")
    
    # Now make it NOT NULL
    op.alter_column('payments', 'payment_type', nullable=False)
    op.add_column('payments', sa.Column('merchant_trans_id', sa.String(length=255), nullable=True))
    op.add_column('payments', sa.Column('click_trans_id', sa.String(length=255), nullable=True))
    op.add_column('payments', sa.Column('merchant_prepare_id', sa.String(length=255), nullable=True))
    op.add_column('payments', sa.Column('click_card_token_id', sa.Integer(), nullable=True))
    op.add_column('payments', sa.Column('payme_receipt_id', sa.String(length=255), nullable=True))
    op.add_column('payments', sa.Column('payme_card_token_id', sa.Integer(), nullable=True))
    op.add_column('payments', sa.Column('error_code', sa.Integer(), nullable=True))
    op.add_column('payments', sa.Column('error_message', sa.String(length=500), nullable=True))
    # Add updated_at column as nullable first
    op.add_column('payments', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    
    # Update existing records with current timestamp
    op.execute("UPDATE payments SET updated_at = NOW() WHERE updated_at IS NULL")
    
    # Now make it NOT NULL
    op.alter_column('payments', 'updated_at', nullable=False)
    op.create_unique_constraint(None, 'payments', ['merchant_prepare_id'])
    op.create_foreign_key(None, 'payments', 'payme_card_tokens', ['payme_card_token_id'], ['id'])
    op.create_foreign_key(None, 'payments', 'click_card_tokens', ['click_card_token_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'payments', type_='foreignkey')
    op.drop_constraint(None, 'payments', type_='foreignkey')
    op.drop_constraint(None, 'payments', type_='unique')
    op.drop_column('payments', 'updated_at')
    op.drop_column('payments', 'error_message')
    op.drop_column('payments', 'error_code')
    op.drop_column('payments', 'payme_card_token_id')
    op.drop_column('payments', 'payme_receipt_id')
    op.drop_column('payments', 'click_card_token_id')
    op.drop_column('payments', 'merchant_prepare_id')
    op.drop_column('payments', 'click_trans_id')
    op.drop_column('payments', 'merchant_trans_id')
    op.drop_column('payments', 'payment_type')
    op.create_table('inventory',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('available_quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['toy_categories.id'], name='inventory_category_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='inventory_pkey')
    )
    op.create_index('ix_inventory_id', 'inventory', ['id'], unique=False)
    op.create_index('ix_inventory_category_id', 'inventory', ['category_id'], unique=False)
    op.drop_index(op.f('ix_payme_card_tokens_id'), table_name='payme_card_tokens')
    op.drop_table('payme_card_tokens')
    op.drop_index(op.f('ix_click_card_tokens_id'), table_name='click_card_tokens')
    op.drop_table('click_card_tokens')
    
    # Drop enum type
    op.execute("DROP TYPE paymenttype")
    # ### end Alembic commands ###
