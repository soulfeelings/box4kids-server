from sqlalchemy.orm import Session
from repositories.payment_repository import PaymentRepository
from repositories.subscription_repository import SubscriptionRepository
from services.mock_payment_gateway import MockPaymentGateway
from models.payment import Payment, PaymentStatus
from typing import List, Optional, Dict
from models.subscription import Subscription
from schemas.payment_schemas import PaymentResult, PaymentStatusEnum

# –î–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å–æ–∑–¥–∞–Ω–∏—è ToyBox
from services.toy_box_service import ToyBoxService


class PaymentService:
    def __init__(self, db: Session):
        self.db = db
        self.payment_repo = PaymentRepository(db)
        self.subscription_repo = SubscriptionRepository(db)
        self.gateway = MockPaymentGateway()  # –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –±—É–¥–µ—Ç RealPaymentGateway
        self.toy_box_service = ToyBoxService(db)  # –î–ª—è –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è ToyBox

    def create_payment(self, user_id: int, amount: float, currency: str = "RUB") -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        
        # –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        gateway_response = self.gateway.create_payment(
            amount=amount,
            currency=currency,
            return_url="https://oursite.com/payment/return",
            notification_url="https://oursite.com/payment/webhook"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –Ω–∞—à–µ–π –ë–î
        payment = Payment(
            user_id=user_id,
            amount=amount,
            currency=currency,
            status=PaymentStatus.PENDING,
            external_payment_id=gateway_response["id"]
        )
        
        payment = self.payment_repo.create(payment)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        return {
            "payment_id": payment.id,
            "external_payment_id": gateway_response["id"],
            "payment_url": gateway_response["payment_url"],
            "amount": amount,
            "currency": currency,
            "expires_at": gateway_response["expires_at"],
            "status": "pending"
        }

    def create_batch_payment(self, subscription_ids: List[int]) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–∫–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        
        print(f"üì¶ –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫: {subscription_ids}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        subscriptions = []
        for subscription_id in subscription_ids:
            subscription = self.subscription_repo.get_by_id(subscription_id)
            if not subscription:
                raise ValueError(f"–ü–æ–¥–ø–∏—Å–∫–∞ —Å ID {subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            if subscription.payment_id:
                raise ValueError(f"–ü–æ–¥–ø–∏—Å–∫–∞ —Å ID {subscription_id} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ø–ª–∞—Ç–µ–∂—É")
            subscriptions.append(subscription)
            print(f"  üìã –ü–æ–¥–ø–∏—Å–∫–∞ {subscription_id}: –ø–ª–∞–Ω {subscription.plan_id}, —Ü–µ–Ω–∞ {subscription.individual_price}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_ids = set(sub.child.parent_id for sub in subscriptions)
        if len(user_ids) > 1:
            raise ValueError("–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        
        user_id = user_ids.pop()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
        total_amount = sum(sub.individual_price for sub in subscriptions)
        print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_response = self.create_payment(user_id, total_amount)
        payment_id = payment_response["payment_id"]
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∫ –ø–ª–∞—Ç–µ–∂—É
        for subscription in subscriptions:
            subscription.payment_id = payment_id
            self.db.flush()
        
        payment_response["subscription_count"] = len(subscriptions)
        return payment_response

    async def create_and_process_payment(self, subscription_ids: List[int]) -> PaymentResult:
        """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏ —Å—Ä–∞–∑—É –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç"""
        
        print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_ids}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–ª–∞—Ç–µ–∂ —Å —ç—Ç–∏–º –Ω–∞–±–æ—Ä–æ–º –ø–æ–¥–ø–∏—Å–æ–∫
        existing_payment = self._find_payment_by_subscriptions(subscription_ids)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É –ø–æ–¥–ø–∏—Å–æ–∫
        current_total = self._calculate_subscriptions_total(subscription_ids)
        
        if existing_payment:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂ {existing_payment.id} —Å —Å—É–º–º–æ–π {existing_payment.amount}")
            print(f"üí∞ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {current_total}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã
            if abs(existing_payment.amount - current_total) < 0.01:  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å float
                payment_id = existing_payment.id
                amount = existing_payment.amount
                print("‚úÖ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–∏–º —Ü–µ–Ω–∞–º")
            else:
                print("‚ö†Ô∏è –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–∏–º —Ü–µ–Ω–∞–º, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                self._unlink_subscriptions_from_payment(subscription_ids)
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                payment_response = self.create_batch_payment(subscription_ids)
                payment_id = payment_response["payment_id"]
                amount = payment_response["amount"]
                print(f"üí∞ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ {payment_id} —Å —Å—É–º–º–æ–π {amount}")
        else:
            print(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ {subscription_ids}")
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            payment_response = self.create_batch_payment(subscription_ids)
            payment_id = payment_response["payment_id"]
            amount = payment_response["amount"]
            print(f"üí∞ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment_id} —Å —Å—É–º–º–æ–π {amount}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
        success = await self.process_payment_async(payment_id)
        
        if success:
            return PaymentResult(
                status=PaymentStatusEnum.SUCCESS,
                message="–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã",
                payment_id=payment_id,
                amount=amount
            )
        else:
            return PaymentResult(
                status=PaymentStatusEnum.FAILED,
                message="–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª",
                payment_id=payment_id,
                amount=amount
            )

    def _find_payment_by_subscriptions(self, subscription_ids: List[int]) -> Optional[Payment]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–ª–∞—Ç–µ–∂ —Å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º –∂–µ –Ω–∞–±–æ—Ä–æ–º –ø–æ–¥–ø–∏—Å–æ–∫"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫
        payments = self.db.query(Payment).join(
            Subscription, Payment.id == Subscription.payment_id
        ).filter(
            Subscription.id.in_(subscription_ids)
        ).all()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
        for payment in payments:
            payment_subscription_ids = [
                sub.id for sub in self.subscription_repo.get_by_payment_id(payment.id)
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–±–æ—Ä—ã –ø–æ–¥–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
            if set(payment_subscription_ids) == set(subscription_ids):
                return payment
        
        return None

    def _calculate_subscriptions_total(self, subscription_ids: List[int]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –ø–æ–¥–ø–∏—Å–æ–∫"""
        total = 0.0
        for subscription_id in subscription_ids:
            subscription = self.subscription_repo.get_by_id(subscription_id)
            if subscription:
                total += subscription.individual_price
        return total

    def _unlink_subscriptions_from_payment(self, subscription_ids: List[int]) -> None:
        """–û—Ç–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç –ø–ª–∞—Ç–µ–∂–∞"""
        for subscription_id in subscription_ids:
            subscription = self.subscription_repo.get_by_id(subscription_id)
            if subscription and subscription.payment_id:
                subscription.payment_id = None  # type: ignore
                self.db.flush()

    async def process_payment_async(self, payment_id: int, simulate_delay: bool = True) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API"""
        payment = self.payment_repo.get_by_id(payment_id)
        
        if not payment:
            print(f"Payment {payment_id} not found")
            return False
        
        if payment.status not in [PaymentStatus.PENDING, PaymentStatus.FAILED]:
            print(f"Payment {payment_id} cannot be reprocessed, status is {payment.status}")
            return False
        
        # –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        gateway_response = await self.gateway.process_payment_async(
            payment.external_payment_id, simulate_delay
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—à–µ–π –ë–î
        success = gateway_response["status"] == "succeeded"
        new_status = PaymentStatus.COMPLETED if success else PaymentStatus.FAILED
        self.payment_repo.update_status(payment_id, new_status)
        
        # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞ - —Å–æ–∑–¥–∞–µ–º ToyBox
        if success:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –ø–ª–∞—Ç–µ–∂–æ–º
                subscriptions = self.subscription_repo.get_by_payment_id(payment_id)
                
                if not subscriptions:
                    print(f"Subscriptions for payment {payment_id} not found")
                    return False
                
                # –°–æ–∑–¥–∞–µ–º ToyBox –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                for subscription in subscriptions:
                    toy_box = self.toy_box_service.create_box_for_subscription(subscription.id)
                    print(f"Created ToyBox {toy_box.id} for subscription {subscription.id}")
                    
            except Exception as e:
                print(f"Failed to create ToyBox: {e}")
                # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ ToyBox –Ω–µ —É–¥–∞–ª–æ—Å—å
        
        return success

    def process_payment(self, payment_id: int) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        payment = self.payment_repo.get_by_id(payment_id)
        if not payment:
            print(f"Payment {payment_id} not found")
            return False
        
        if payment.status not in [PaymentStatus.PENDING, PaymentStatus.FAILED]:
            print(f"Payment {payment_id} cannot be reprocessed, status is {payment.status}")
            return False
        
        # –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π API
        gateway_response = self.gateway.process_payment_sync(payment.external_payment_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        success = gateway_response["status"] == "succeeded"
        new_status = PaymentStatus.COMPLETED if success else PaymentStatus.FAILED
        self.payment_repo.update_status(payment_id, new_status)
        
        return success

    def handle_user_return(self, external_payment_id: str, status: str = "success") -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        payment = self.payment_repo.get_by_external_id(external_payment_id)
        if not payment:
            return {"error": "Payment not found"}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API
        gateway_response = self.gateway.simulate_user_return(external_payment_id, status)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        if gateway_response["status"] == "succeeded":
            self.payment_repo.update_status(payment.id, PaymentStatus.COMPLETED)
            return {
                "status": "success",
                "payment_id": payment.id,
                "external_payment_id": external_payment_id,
                "message": "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
            }
        else:
            self.payment_repo.update_status(payment.id, PaymentStatus.FAILED)
            return {
                "status": "failed",
                "payment_id": payment.id,
                "external_payment_id": external_payment_id,
                "message": "–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω"
            }

    def handle_webhook(self, external_payment_id: str, status: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ API"""
        payment = self.payment_repo.get_by_external_id(external_payment_id)
        if not payment:
            return False
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API
        status_mapping = {
            "succeeded": PaymentStatus.COMPLETED,
            "failed": PaymentStatus.FAILED,
            "refunded": PaymentStatus.REFUNDED,
            "pending": PaymentStatus.PENDING
        }
        
        new_status = status_mapping.get(status)
        if new_status:
            self.payment_repo.update_status(payment.id, new_status)
            return True
        
        return False

    def get_payment_by_id(self, payment_id: int) -> Optional[Payment]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –ø–æ ID"""
        return self.payment_repo.get_by_id(payment_id)

    def get_payment_by_external_id(self, external_payment_id: str) -> Optional[Payment]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –ø–æ –≤–Ω–µ—à–Ω–µ–º—É ID"""
        return self.payment_repo.get_by_external_id(external_payment_id)

    def get_user_payments(self, user_id: int) -> List[Payment]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.payment_repo.get_by_user_id(user_id)

    def refund_payment(self, payment_id: int) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API"""
        payment = self.payment_repo.get_by_id(payment_id)
        if not payment or payment.status != PaymentStatus.COMPLETED:
            return False
        
        # –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π API –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        gateway_response = self.gateway.refund_payment(
            payment.external_payment_id, 
            payment.amount
        )
        
        if gateway_response["status"] == "succeeded":
            self.payment_repo.update_status(payment_id, PaymentStatus.REFUNDED)
            return True
        
        return False
